<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#

var numerics = new[]
{
    new { Name = "Decimal",         IsNullable = false, Type = "decimal",  SumType = "decimal" },
    new { Name = "Double",          IsNullable = false, Type = "double",   SumType = "double"  },
    new { Name = "Single",          IsNullable = false, Type = "float",    SumType = "float"   },
    new { Name = "Int32",           IsNullable = false, Type = "int",      SumType = "int"     },
    new { Name = "Int64",           IsNullable = false, Type = "long",     SumType = "long"    },
    new { Name = "NullableDecimal", IsNullable = true,  Type = "decimal?", SumType = "decimal" },
    new { Name = "NullableDouble",  IsNullable = true,  Type = "double?",  SumType = "double"  },
    new { Name = "NullableSingle",  IsNullable = true,  Type = "float?",   SumType = "float"   },
    new { Name = "NullableInt32",   IsNullable = true,  Type = "int?",     SumType = "int"     },
    new { Name = "NullableInt64",   IsNullable = true,  Type = "long?",    SumType = "long"    },
};

#>
// EnumerableQuest - Avoids multiple enumeration
// 
// Copyright 2021 Pierre Lando
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;

#nullable enable

namespace EnumerationQuest.Consumers
{
    internal static partial class ConsumerFactory
    {
<# foreach (var n in numerics) { #>
        public static IEnumerableConsumer<<#= n.Type #>, <#= n.Type #>> SumOf<#= n.Name #>()
        {
            return new SumOf<#= n.Name #>Consumer();
        }

<# } #>
<# foreach (var n in numerics) { #>
        public static IEnumerableConsumer<TSource, <#= n.Type #>> SumOf<#= n.Name #><TSource>(Func<TSource, <#= n.Type #>> selector)
        {
            if (selector is null)
                throw new ArgumentNullException(nameof(selector));

            return new SumOf<#= n.Name #>WithSelectorConsumer<TSource>(selector);
        }

<# } #>
    }

<# foreach (var n in numerics) { #>
    internal class SumOf<#= n.Name #>Consumer : IEnumerableConsumer<<#= n.Type #>, <#= n.Type #>>
    {
        public IEnumerableSink<<#= n.Type #>, <#= n.Type #>> GetSink()
        {
            return new Sink();
        }

<# if (n.IsNullable) { #>
        private class Sink : IEnumerableSink<<#= n.Type #>, <#= n.Type #>>
        {
            private <#= n.SumType #> _sum;

            public bool AcceptFirst(<#= n.Type #> element)
            {
                return AcceptNext(element);
            }

            public bool AcceptNext(<#= n.Type #> element)
            {
                if (element.HasValue)
                    _sum += element.Value;

                return true;
            }

            public void Dispose()
            {
            }

            public <#= n.Type #> GetResult()
            {
                return _sum;
            }
        }
<# } else { #>
        private class Sink : IEnumerableSink<<#= n.Type #>, <#= n.Type #>>
        {
            private <#= n.SumType #> _sum;

            public bool AcceptFirst(<#= n.Type #> element)
            {
                return AcceptNext(element);
            }

            public bool AcceptNext(<#= n.Type #> element)
            {
                _sum += element;
                return true;
            }

            public void Dispose()
            {
            }

            public <#= n.Type #> GetContent()
            {
                return _sum;
            }

            public <#= n.Type #> GetResult()
            {
                return _sum;
            }
        }
<# } #>
    }

    internal class SumOf<#= n.Name #>WithSelectorConsumer<TSource> : IEnumerableConsumer<TSource, <#= n.Type #>>
    {
        private readonly Func<TSource, <#= n.Type #>> _selector;

        public SumOf<#= n.Name #>WithSelectorConsumer(Func<TSource, <#= n.Type #>> selector)
        {
            _selector = selector;
        }

        public IEnumerableSink<TSource, <#= n.Type #>> GetSink()
        {
            return new Sink(_selector);
        }

<# if (n.IsNullable) { #>
        private class Sink : IEnumerableSink<TSource, <#= n.Type #>>
        {
            private readonly Func<TSource, <#= n.Type #>> _selector;

            private <#= n.SumType #> _sum;

            public Sink(Func<TSource, <#= n.Type #>> selector)
            {
                _selector = selector;
            }

            public bool AcceptFirst(TSource element)
            {
                return AcceptNext(element);
            }

            public bool AcceptNext(TSource element)
            {
                var nullable = _selector(element);
                if (nullable.HasValue)
                    _sum += nullable.Value;

                return true;
            }

            public void Dispose()
            {
            }

            public <#= n.Type #> GetResult()
            {
                return _sum;
            }
        }
<# } else { #>
        private class Sink : IEnumerableSink<TSource, <#= n.Type #>>
        {
            private readonly Func<TSource, <#= n.Type #>> _selector;

            private <#= n.SumType #> _sum;

            public Sink(Func<TSource, <#= n.Type #>> selector)
            {
                _selector = selector;
            }

            public bool AcceptFirst(TSource element)
            {
                return AcceptNext(element);
            }

            public bool AcceptNext(TSource element)
            {
                _sum += _selector(element);
                return true;
            }

            public void Dispose()
            {
            }

            public <#= n.Type #> GetResult()
            {
                return _sum;
            }
        }
<# } #>
    }

<# } #>
}