<#

var docForSingle = new []
{
	@"<summary>",
	@"	<para>",
	@"		Requests the evaluation of the only element of a sequence.",
	@"	</para>",
	@"	<para>",
	@"		The result of this request is the only element of the specified sequence.",
	@"	</para>",
	@"</summary>",
	@"<remarks>",
	@"	<para>",
	@"		The returned object deconstruction throw <see cref=""InvalidOperationException""/>",
	@"		if the source sequence do not contains exactly one element.",
	@"	</para>",
	@"</remarks>",
	@"<seealso cref=""Enumerable.Single{TSource}(IEnumerable{TSource})""/>",
};

var docForSingleWithPredicate = new []
{
	@"<summary>",
	@"	<para>",
	@"		Requests the evaluation of the only element in a sequence that satisfies a specified condition.",
	@"	</para>",
	@"	<para>",
	@"		The result of this request is the only element in the sequence that passes the test in the specified predicate function.",
	@"	</para>",
	@"</summary>",
	@"<remarks>",
	@"	<para>",
	@"		The returned object deconstruction throw <see cref=""InvalidOperationException""/>",
	@"		if the number of elements that satisfies the condition in <paramref name=""predicate""/> is not exactly one.",
	@"	</para>",
	@"</remarks>",
	@"<param name=""predicate"">A function to test each element for a condition.</param>",
	@"<seealso cref=""Enumerable.Single{TSource}(IEnumerable{TSource}, Func{TSource,Boolean})""/>",
	@"<exception cref=""ArgumentNullException""><paramref name=""predicate""/> is <see langword=""null""/>.</exception>",
};

#>