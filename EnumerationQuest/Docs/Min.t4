<#

var docForMin = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the minimum value in a sequence.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the minimum value in the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    <see cref=""Comparer{TSource}.Default""/> is used to compare elements.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a reference type and the source sequence is empty",
    @"    or contains only values that are <see langword=""null""/>, the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"  <para>",
    @"    The returned object deconstruction throw <see cref=""ArgumentException""/>",
    @"    if no object in the sequence implements the <see cref=""IComparable""/> or <see cref=""IComparable{TSource}""/> interface.",
    @"  </para>",
    @"</remarks>",
    @"<seealso cref=""Enumerable.Min{TSource}(IEnumerable{TSource})""/>",
};

var docForMinWithComparer = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the minimum value in a sequence by using a specified <see cref=""IComparer{TSource}""/>.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the minimum value in the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a reference type and the source sequence is empty",
    @"    or contains only values that are <see langword=""null""/>, the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"</remarks>",
    @"<param name=""comparer"">A comparer to compare values.</param>",
    @"<seealso cref=""Enumerable.Min{TSource}(IEnumerable{TSource})""/>",
    @"<exception cref=""ArgumentNullException""><paramref name=""comparer""/> is <see langword=""null""/>.</exception>",
};

var docForMinWithSelector = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the minimum value of tranformed objects from a sequence.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the minimum value of transformed objects from the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    <see cref=""Comparer{TResult}.Default""/> is used to compare elements.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TResult""/> is a reference type and the source sequence is empty",
    @"    or contains only values that are transformed to <see langword=""null""/>, the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TResult""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"  <para>",
    @"    The returned object deconstruction throw <see cref=""ArgumentException""/>",
    @"    if no object in the sequence after transformation implements the <see cref=""IComparable""/> or <see cref=""IComparable{TResult}""/> interface.",
    @"  </para>",
    @"</remarks>",
    @"<typeparam name=""TResult"">The type of the value returned by <paramref name=""selector""/>.</typeparam>",
    @"<param name=""selector"">A transform function to apply to each element.</param>",
    @"<seealso cref=""Enumerable.Min{TSource,TResult}(IEnumerable{TSource}, Func{TSource,TResult})""/>",
    @"<exception cref=""ArgumentNullException""><paramref name=""selector""/> is <see langword=""null""/>.</exception>",
};

var docForMinWithSelectorAndComparer = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the minimum value of tranformed objects from a sequence by using a specified <see cref=""IComparer{TResult}""/>.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the minimum value of transformed objects from the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a reference type and the source sequence is empty",
    @"    or contains only values that are transformed to <see langword=""null""/>, the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"</remarks>",
    @"<typeparam name=""TResult"">The type of the value returned by <paramref name=""selector""/>.</typeparam>",
    @"<param name=""comparer"">A comparer to compare values after transformation.</param>",
    @"<param name=""selector"">A transform function to apply to each element.</param>",
    @"<seealso cref=""Enumerable.Min{TSource,TResult}(IEnumerable{TSource}, Func{TSource,TResult})""/>",
    @"<exception cref=""ArgumentNullException""><paramref name=""comparer""/> is <see langword=""null""/>.</exception>",
    @"<exception cref=""ArgumentNullException""><paramref name=""selector""/> is <see langword=""null""/>.</exception>",
};

#>