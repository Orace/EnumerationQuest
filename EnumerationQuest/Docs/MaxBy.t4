<#

var docForMaxBy = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the value with the maximum key in a sequence; according to a specified key selector function.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the value with the maximum key in the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    <see cref=""Comparer{TKey}.Default""/> is used to compare keys.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a reference type and the source sequence is empty",
    @"    the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"  <para>",
    @"    The returned object deconstruction throw <see cref=""ArgumentException""/>",
    @"    if no key extracted from the sequence implements the <see cref=""IComparable""/> or <see cref=""IComparable{TResult}""/> interface.",
    @"  </para>",
    @"</remarks>",
    @"<typeparam name=""TKey"">The type of key to compare elements by.</typeparam>",
    @"<param name=""keySelector"">A function to extract the key for each element.</param>",
    @"<seealso cref=""Enumerable.MaxBy{TSource,TKey}(IEnumerable{TSource}, Func{TSource,TKey})""/>",
    @"<exception cref=""ArgumentNullException""><paramref name=""keySelector""/> is <see langword=""null""/>.</exception>",
};

var docForMaxByWithComparer = new []
{
    @"<summary>",
    @"  <para>",
    @"    Requests the evaluation of the value with the maximum key in a sequence; according to a specified key selector function and key comparer.",
    @"  </para>",
    @"  <para>",
    @"    The result of this request is the value with the maximum key in the sequence.",
    @"  </para>",
    @"</summary>",
    @"<remarks>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a reference type and the source sequence is empty",
    @"    the result of this request is <see langword=""null""/>.",
    @"  </para>",
    @"  <para>",
    @"    If <typeparamref name=""TSource""/> is a value type and the source sequence is empty",
    @"    the returned object deconstruction throw <see cref=""InvalidOperationException""/>.",
    @"  </para>",
    @"</remarks>",
    @"<typeparam name=""TKey"">The type of key to compare elements by.</typeparam>",
    @"<param name=""comparer"">A comparer to compare keys.</param>",
    @"<param name=""keySelector"">A function to extract the key for each element.</param>",
    @"<seealso cref=""Enumerable.MaxBy{TSource,TKey}(IEnumerable{TSource}, Func{TSource,TKey}, IComparer{TKey})""/>",
    @"<exception cref=""ArgumentNullException""><paramref name=""comparer""/> is <see langword=""null""/>.</exception>",
    @"<exception cref=""ArgumentNullException""><paramref name=""keySelector""/> is <see langword=""null""/>.</exception>",
};

#>