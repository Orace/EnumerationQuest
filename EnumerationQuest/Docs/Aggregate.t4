<#

var docForAggregate = new []
{
	@"<summary>",
	@"	<para>",
	@"		Requests the evaluation of an accumulator function over a sequence.",
	@"	</para>",
	@"	<para>",
	@"		The result of this request is the final accumulator value.",
	@"	</para>",
	@"</summary>",
	@"<remarks>",
	@"	<para>",
	@"		The returned object deconstruction throw <see cref=""InvalidOperationException""/>",
	@"		if the sequence contains no elements.",
	@"	</para>",
	@"</remarks>",
	@"<param name=""func"">An accumulator function to be invoked on each element.</param>",
	@"<seealso cref=""Enumerable.Aggregate{TSource}(IEnumerable{TSource}, Func{TSource, TSource, TSource})""/>",
	@"<exception cref=""ArgumentNullException""><paramref name=""func""/> is <see langword=""null""/>.</exception>",
};

var docForAggregateWithSeed = new []
{
	@"<summary>",
	@"	<para>",
	@"		Requests the evaluation of an accumulator function over a sequence.",
	@"		The specified seed value is used as the initial accumulator value.",
	@"	</para>",
	@"	<para>",
	@"		The result of this request is the final accumulator value.",
	@"	</para>",
	@"</summary>",
	@"<typeparam name=""TAccumulate"">The type of the accumulator value.</typeparam>",
	@"<param name=""seed"">The initial accumulator value.</param>",
	@"<param name=""func"">An accumulator function to be invoked on each element.</param>",
	@"<seealso cref=""Enumerable.Aggregate{TSource, TAccumulate}(IEnumerable{TSource}, TAccumulate, Func{TAccumulate, TSource, TAccumulate})""/>",
	@"<exception cref=""ArgumentNullException""><paramref name=""func""/> is <see langword=""null""/>.</exception>",
};

var docForAggregateWithSeedAndResultSelector = new []
{
	@"<summary>",
	@"	<para>",
	@"		Requests the evaluation of an accumulator function over a sequence.",
	@"		The specified seed value is used as the initial accumulator value,",
	@"		and the specified function is used to select the result value.",
	@"	</para>",
	@"	<para>",
	@"		The result of this request is the transformed final accumulator value.",
	@"	</para>",
	@"</summary>",
	@"<typeparam name=""TAccumulate"">The type of the accumulator value.</typeparam>",
	@"<param name=""seed"">The initial accumulator value.</param>",
	@"<param name=""func"">An accumulator function to be invoked on each element.</param>",
	@"<param name=""resultSelector"">A function to transform the final accumulator value into the result value.</param>",
	@"<seealso cref=""Enumerable.Aggregate{TSource, TAccumulate, TResult}(IEnumerable{TSource}, TAccumulate, Func{TAccumulate, TSource, TAccumulate}, Func{TAccumulate,TResult})""/>",
	@"<exception cref=""ArgumentNullException""><paramref name=""func""/> is <see langword=""null""/>.</exception>",
	@"<exception cref=""ArgumentNullException""><paramref name=""resultSelector""/> is <see langword=""null""/>.</exception>",
};

#>